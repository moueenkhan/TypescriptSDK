<?php

declare(strict_types=1);

/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace YapstoneStagedOnBoardingServicesLib\Models;

use stdClass;

class BusinessLegalEntity implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string
     */
    private $type;

    /**
     * @var Address|null
     */
    private $address;

    /**
     * @var Phone|null
     */
    private $phone;

    /**
     * @var string|null
     */
    private $email;

    /**
     * @var string|null
     */
    private $website;

    /**
     * @var SocialNetwork[]|null
     */
    private $socialNetworks;

    /**
     * @var string[]|null
     */
    private $digitalCurrencyAddresses;

    /**
     * @var array<string,string>|null
     */
    private $additional;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $businessType;

    /**
     * @var string[]|null
     */
    private $dba;

    /**
     * @var IndividualLegalEntity|null
     */
    private $primaryContact;

    /**
     * @var LegalEntity|null
     */
    private $principalOwner;

    /**
     * @var LegalEntity[]|null
     */
    private $additionalOwners;

    /**
     * @var IdentityDocument[]|null
     */
    private $identityDocuments;

    /**
     * @var BusinessRegistration|null
     */
    private $registration;

    /**
     * @param string $type
     */
    public function __construct(string $type)
    {
        $this->type = $type;
    }

    /**
     * Returns Id.
     * The Party ID of the Customer, for internal use only. Should not appear in user facing documentation.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * The Party ID of the Customer, for internal use only. Should not appear in user facing documentation.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Type.
     * the second description of type parameter
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * the second description of type parameter
     *
     * @required
     * @maps type
     * @factory \YapstoneStagedOnBoardingServicesLib\Models\LegalEntityTypeEnum::checkValue
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Address.
     */
    public function getAddress(): ?Address
    {
        return $this->address;
    }

    /**
     * Sets Address.
     *
     * @maps address
     */
    public function setAddress(?Address $address): void
    {
        $this->address = $address;
    }

    /**
     * Returns Phone.
     */
    public function getPhone(): ?Phone
    {
        return $this->phone;
    }

    /**
     * Sets Phone.
     *
     * @maps phone
     */
    public function setPhone(?Phone $phone): void
    {
        $this->phone = $phone;
    }

    /**
     * Returns Email.
     * The email address.
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * Sets Email.
     * The email address.
     *
     * @maps email
     */
    public function setEmail(?string $email): void
    {
        $this->email = $email;
    }

    /**
     * Returns Website.
     * The website hostname.
     */
    public function getWebsite(): ?string
    {
        return $this->website;
    }

    /**
     * Sets Website.
     * The website hostname.
     *
     * @maps website
     */
    public function setWebsite(?string $website): void
    {
        $this->website = $website;
    }

    /**
     * Returns Social Networks.
     *
     * @return SocialNetwork[]|null
     */
    public function getSocialNetworks(): ?array
    {
        return $this->socialNetworks;
    }

    /**
     * Sets Social Networks.
     *
     * @maps socialNetworks
     *
     * @param SocialNetwork[]|null $socialNetworks
     */
    public function setSocialNetworks(?array $socialNetworks): void
    {
        $this->socialNetworks = $socialNetworks;
    }

    /**
     * Returns Digital Currency Addresses.
     *
     * @return string[]|null
     */
    public function getDigitalCurrencyAddresses(): ?array
    {
        return $this->digitalCurrencyAddresses;
    }

    /**
     * Sets Digital Currency Addresses.
     *
     * @maps digitalCurrencyAddresses
     *
     * @param string[]|null $digitalCurrencyAddresses
     */
    public function setDigitalCurrencyAddresses(?array $digitalCurrencyAddresses): void
    {
        $this->digitalCurrencyAddresses = $digitalCurrencyAddresses;
    }

    /**
     * Returns Additional.
     *
     * @return array<string,string>|null
     */
    public function getAdditional(): ?array
    {
        return $this->additional;
    }

    /**
     * Sets Additional.
     *
     * @maps additional
     *
     * @param array<string,string>|null $additional
     */
    public function setAdditional(?array $additional): void
    {
        $this->additional = $additional;
    }

    /**
     * Returns Name.
     * The business's legal name.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * The business's legal name.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Business Type.
     */
    public function getBusinessType(): ?string
    {
        return $this->businessType;
    }

    /**
     * Sets Business Type.
     *
     * @maps businessType
     * @factory \YapstoneStagedOnBoardingServicesLib\Models\BusinessTypeEnum::checkValue
     */
    public function setBusinessType(?string $businessType): void
    {
        $this->businessType = $businessType;
    }

    /**
     * Returns Dba.
     * Doing Busines As
     *
     * @return string[]|null
     */
    public function getDba(): ?array
    {
        return $this->dba;
    }

    /**
     * Sets Dba.
     * Doing Busines As
     *
     * @maps dba
     *
     * @param string[]|null $dba
     */
    public function setDba(?array $dba): void
    {
        $this->dba = $dba;
    }

    /**
     * Returns Primary Contact.
     */
    public function getPrimaryContact(): ?IndividualLegalEntity
    {
        return $this->primaryContact;
    }

    /**
     * Sets Primary Contact.
     *
     * @maps primaryContact
     */
    public function setPrimaryContact(?IndividualLegalEntity $primaryContact): void
    {
        $this->primaryContact = $primaryContact;
    }

    /**
     * Returns Principal Owner.
     * **Important !** Depending on the value of the `type` parameter, the `LegalEntity` model is extended
     * with either [`IndividualLegalEntity`]($m/IndividualLegalEntity) or
     * [`BusinessLegalEntity`]($m/BusinessLegalEntity)
     */
    public function getPrincipalOwner(): ?LegalEntity
    {
        return $this->principalOwner;
    }

    /**
     * Sets Principal Owner.
     * **Important !** Depending on the value of the `type` parameter, the `LegalEntity` model is extended
     * with either [`IndividualLegalEntity`]($m/IndividualLegalEntity) or
     * [`BusinessLegalEntity`]($m/BusinessLegalEntity)
     *
     * @maps principalOwner
     */
    public function setPrincipalOwner(?LegalEntity $principalOwner): void
    {
        $this->principalOwner = $principalOwner;
    }

    /**
     * Returns Additional Owners.
     * An array of any owners with at least 25% ownership of the company, excluding the principal owner
     * responsible for the account.
     *
     * @return LegalEntity[]|null
     */
    public function getAdditionalOwners(): ?array
    {
        return $this->additionalOwners;
    }

    /**
     * Sets Additional Owners.
     * An array of any owners with at least 25% ownership of the company, excluding the principal owner
     * responsible for the account.
     *
     * @maps additionalOwners
     *
     * @param LegalEntity[]|null $additionalOwners
     */
    public function setAdditionalOwners(?array $additionalOwners): void
    {
        $this->additionalOwners = $additionalOwners;
    }

    /**
     * Returns Identity Documents.
     *
     * @return IdentityDocument[]|null
     */
    public function getIdentityDocuments(): ?array
    {
        return $this->identityDocuments;
    }

    /**
     * Sets Identity Documents.
     *
     * @maps identityDocuments
     *
     * @param IdentityDocument[]|null $identityDocuments
     */
    public function setIdentityDocuments(?array $identityDocuments): void
    {
        $this->identityDocuments = $identityDocuments;
    }

    /**
     * Returns Registration.
     */
    public function getRegistration(): ?BusinessRegistration
    {
        return $this->registration;
    }

    /**
     * Sets Registration.
     *
     * @maps registration
     */
    public function setRegistration(?BusinessRegistration $registration): void
    {
        $this->registration = $registration;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']                       = $this->id;
        }
        $json['type']                         = LegalEntityTypeEnum::checkValue($this->type);
        if (isset($this->address)) {
            $json['address']                  = $this->address;
        }
        if (isset($this->phone)) {
            $json['phone']                    = $this->phone;
        }
        if (isset($this->email)) {
            $json['email']                    = $this->email;
        }
        if (isset($this->website)) {
            $json['website']                  = $this->website;
        }
        if (isset($this->socialNetworks)) {
            $json['socialNetworks']           = $this->socialNetworks;
        }
        if (isset($this->digitalCurrencyAddresses)) {
            $json['digitalCurrencyAddresses'] = $this->digitalCurrencyAddresses;
        }
        if (isset($this->additional)) {
            $json['additional']               = $this->additional;
        }
        if (isset($this->name)) {
            $json['name']                     = $this->name;
        }
        if (isset($this->businessType)) {
            $json['businessType']             = BusinessTypeEnum::checkValue($this->businessType);
        }
        if (isset($this->dba)) {
            $json['dba']                      = $this->dba;
        }
        if (isset($this->primaryContact)) {
            $json['primaryContact']           = $this->primaryContact;
        }
        if (isset($this->principalOwner)) {
            $json['principalOwner']           = $this->principalOwner;
        }
        if (isset($this->additionalOwners)) {
            $json['additionalOwners']         = $this->additionalOwners;
        }
        if (isset($this->identityDocuments)) {
            $json['identityDocuments']        = $this->identityDocuments;
        }
        if (isset($this->registration)) {
            $json['registration']             = $this->registration;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
