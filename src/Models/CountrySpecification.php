<?php

declare(strict_types=1);

/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace YapstoneStagedOnBoardingServicesLib\Models;

use stdClass;

class CountrySpecification implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string|null
     */
    private $defaultCurrency;

    /**
     * @var string[]|null
     */
    private $supportedInstrumentTypes;

    /**
     * @var string[]|null
     */
    private $supportedInstrumentCurrencies;

    /**
     * @var string[]|null
     */
    private $supportedCapabilities;

    /**
     * @var RequiredFields|null
     */
    private $requiredFields;

    /**
     * Returns Id.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Default Currency.
     */
    public function getDefaultCurrency(): ?string
    {
        return $this->defaultCurrency;
    }

    /**
     * Sets Default Currency.
     *
     * @maps defaultCurrency
     */
    public function setDefaultCurrency(?string $defaultCurrency): void
    {
        $this->defaultCurrency = $defaultCurrency;
    }

    /**
     * Returns Supported Instrument Types.
     *
     * @return string[]|null
     */
    public function getSupportedInstrumentTypes(): ?array
    {
        return $this->supportedInstrumentTypes;
    }

    /**
     * Sets Supported Instrument Types.
     *
     * @maps supportedInstrumentTypes
     *
     * @param string[]|null $supportedInstrumentTypes
     */
    public function setSupportedInstrumentTypes(?array $supportedInstrumentTypes): void
    {
        $this->supportedInstrumentTypes = $supportedInstrumentTypes;
    }

    /**
     * Returns Supported Instrument Currencies.
     *
     * @return string[]|null
     */
    public function getSupportedInstrumentCurrencies(): ?array
    {
        return $this->supportedInstrumentCurrencies;
    }

    /**
     * Sets Supported Instrument Currencies.
     *
     * @maps supportedInstrumentCurrencies
     *
     * @param string[]|null $supportedInstrumentCurrencies
     */
    public function setSupportedInstrumentCurrencies(?array $supportedInstrumentCurrencies): void
    {
        $this->supportedInstrumentCurrencies = $supportedInstrumentCurrencies;
    }

    /**
     * Returns Supported Capabilities.
     *
     * @return string[]|null
     */
    public function getSupportedCapabilities(): ?array
    {
        return $this->supportedCapabilities;
    }

    /**
     * Sets Supported Capabilities.
     *
     * @maps supportedCapabilities
     * @factory \YapstoneStagedOnBoardingServicesLib\Models\CapabilityTypeEnum::checkValue
     *
     * @param string[]|null $supportedCapabilities
     */
    public function setSupportedCapabilities(?array $supportedCapabilities): void
    {
        $this->supportedCapabilities = $supportedCapabilities;
    }

    /**
     * Returns Required Fields.
     */
    public function getRequiredFields(): ?RequiredFields
    {
        return $this->requiredFields;
    }

    /**
     * Sets Required Fields.
     *
     * @maps requiredFields
     */
    public function setRequiredFields(?RequiredFields $requiredFields): void
    {
        $this->requiredFields = $requiredFields;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']                            = $this->id;
        }
        if (isset($this->defaultCurrency)) {
            $json['defaultCurrency']               = $this->defaultCurrency;
        }
        if (isset($this->supportedInstrumentTypes)) {
            $json['supportedInstrumentTypes']      = $this->supportedInstrumentTypes;
        }
        if (isset($this->supportedInstrumentCurrencies)) {
            $json['supportedInstrumentCurrencies'] = $this->supportedInstrumentCurrencies;
        }
        if (isset($this->supportedCapabilities)) {
            $json['supportedCapabilities']         = CapabilityTypeEnum::checkValue($this->supportedCapabilities);
        }
        if (isset($this->requiredFields)) {
            $json['requiredFields']                = $this->requiredFields;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
