<?php

declare(strict_types=1);

/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace YapstoneStagedOnBoardingServicesLib\Models;

use stdClass;

class DeniedCapability implements \JsonSerializable
{
    /**
     * @var string
     */
    private $type;

    /**
     * @var string[]|null
     */
    private $reasons;

    /**
     * @var array[]|null
     */
    private $requiredActions;

    /**
     * Returns Type.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Reasons.
     *
     * @return string[]|null
     */
    public function getReasons(): ?array
    {
        return $this->reasons;
    }

    /**
     * Sets Reasons.
     *
     * @maps reasons
     *
     * @param string[]|null $reasons
     */
    public function setReasons(?array $reasons): void
    {
        $this->reasons = $reasons;
    }

    /**
     * Returns Required Actions.
     *
     * @return array[]|null
     */
    public function getRequiredActions(): ?array
    {
        return $this->requiredActions;
    }

    /**
     * Sets Required Actions.
     *
     * @maps requiredActions
     *
     * @param array[]|null $requiredActions
     */
    public function setRequiredActions(?array $requiredActions): void
    {
        $this->requiredActions = $requiredActions;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['type']                = $this->type;
        if (isset($this->reasons)) {
            $json['reasons']         = $this->reasons;
        }
        if (isset($this->requiredActions)) {
            $json['requiredActions'] = $this->requiredActions;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
