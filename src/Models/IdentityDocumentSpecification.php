<?php

declare(strict_types=1);

/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace YapstoneStagedOnBoardingServicesLib\Models;

use stdClass;

class IdentityDocumentSpecification implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $displayName;

    /**
     * @var string[]|null
     */
    private $types;

    /**
     * @var string[]|null
     */
    private $supportedCountries;

    /**
     * @var FieldSpecification[]|null
     */
    private $details;

    /**
     * @var FingerprintSpecification[]|null
     */
    private $fingerprints;

    /**
     * Returns Name.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Display Name.
     */
    public function getDisplayName(): ?string
    {
        return $this->displayName;
    }

    /**
     * Sets Display Name.
     *
     * @maps displayName
     */
    public function setDisplayName(?string $displayName): void
    {
        $this->displayName = $displayName;
    }

    /**
     * Returns Types.
     *
     * @return string[]|null
     */
    public function getTypes(): ?array
    {
        return $this->types;
    }

    /**
     * Sets Types.
     *
     * @maps types
     * @factory \YapstoneStagedOnBoardingServicesLib\Models\LegalEntityTypeEnum::checkValue
     *
     * @param string[]|null $types
     */
    public function setTypes(?array $types): void
    {
        $this->types = $types;
    }

    /**
     * Returns Supported Countries.
     *
     * @return string[]|null
     */
    public function getSupportedCountries(): ?array
    {
        return $this->supportedCountries;
    }

    /**
     * Sets Supported Countries.
     *
     * @maps supportedCountries
     *
     * @param string[]|null $supportedCountries
     */
    public function setSupportedCountries(?array $supportedCountries): void
    {
        $this->supportedCountries = $supportedCountries;
    }

    /**
     * Returns Details.
     *
     * @return FieldSpecification[]|null
     */
    public function getDetails(): ?array
    {
        return $this->details;
    }

    /**
     * Sets Details.
     *
     * @maps details
     *
     * @param FieldSpecification[]|null $details
     */
    public function setDetails(?array $details): void
    {
        $this->details = $details;
    }

    /**
     * Returns Fingerprints.
     *
     * @return FingerprintSpecification[]|null
     */
    public function getFingerprints(): ?array
    {
        return $this->fingerprints;
    }

    /**
     * Sets Fingerprints.
     *
     * @maps fingerprints
     *
     * @param FingerprintSpecification[]|null $fingerprints
     */
    public function setFingerprints(?array $fingerprints): void
    {
        $this->fingerprints = $fingerprints;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->name)) {
            $json['name']               = $this->name;
        }
        if (isset($this->displayName)) {
            $json['displayName']        = $this->displayName;
        }
        if (isset($this->types)) {
            $json['types']              = LegalEntityTypeEnum::checkValue($this->types);
        }
        if (isset($this->supportedCountries)) {
            $json['supportedCountries'] = $this->supportedCountries;
        }
        if (isset($this->details)) {
            $json['details']            = $this->details;
        }
        if (isset($this->fingerprints)) {
            $json['fingerprints']       = $this->fingerprints;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
