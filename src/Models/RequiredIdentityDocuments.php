<?php

declare(strict_types=1);

/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace YapstoneStagedOnBoardingServicesLib\Models;

use stdClass;

/**
 * When both `allOf` and `oneOf` are specified they should be considered as expressions in an AND
 * condition. Eg. allOf[X, Y] AND oneOf[A, B].
 */
class RequiredIdentityDocuments implements \JsonSerializable
{
    /**
     * @var string[]|null
     */
    private $allOf;

    /**
     * @var string[]|null
     */
    private $oneOf;

    /**
     * Returns All Of.
     * A list of acceptable identity documents, of which all specified are required.
     *
     * @return string[]|null
     */
    public function getAllOf(): ?array
    {
        return $this->allOf;
    }

    /**
     * Sets All Of.
     * A list of acceptable identity documents, of which all specified are required.
     *
     * @maps allOf
     *
     * @param string[]|null $allOf
     */
    public function setAllOf(?array $allOf): void
    {
        $this->allOf = $allOf;
    }

    /**
     * Returns One Of.
     * A list of acceptable identity documents, from which one is required to be chosen.
     *
     * @return string[]|null
     */
    public function getOneOf(): ?array
    {
        return $this->oneOf;
    }

    /**
     * Sets One Of.
     * A list of acceptable identity documents, from which one is required to be chosen.
     *
     * @maps oneOf
     *
     * @param string[]|null $oneOf
     */
    public function setOneOf(?array $oneOf): void
    {
        $this->oneOf = $oneOf;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->allOf)) {
            $json['allOf'] = $this->allOf;
        }
        if (isset($this->oneOf)) {
            $json['oneOf'] = $this->oneOf;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
