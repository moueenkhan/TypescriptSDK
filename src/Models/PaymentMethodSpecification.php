<?php

declare(strict_types=1);

/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace YapstoneStagedOnBoardingServicesLib\Models;

use stdClass;

class PaymentMethodSpecification implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $displayName;

    /**
     * @var string[]|null
     */
    private $supportedCountries;

    /**
     * @var string[]|null
     */
    private $supportedCurrencies;

    /**
     * @var string[]|null
     */
    private $requiredFields;

    /**
     * @var FieldSpecification[]|null
     */
    private $details;

    /**
     * @var FieldSpecification[]|null
     */
    private $actions;

    /**
     * @var string[]|null
     */
    private $supportedInstrumentTypes;

    /**
     * @var bool|null
     */
    private $requiresInstrument;

    /**
     * Returns Name.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Display Name.
     */
    public function getDisplayName(): ?string
    {
        return $this->displayName;
    }

    /**
     * Sets Display Name.
     *
     * @maps displayName
     */
    public function setDisplayName(?string $displayName): void
    {
        $this->displayName = $displayName;
    }

    /**
     * Returns Supported Countries.
     * ISO 3166-1 alpha-2 or alpha-3 country code.
     *
     * @return string[]|null
     */
    public function getSupportedCountries(): ?array
    {
        return $this->supportedCountries;
    }

    /**
     * Sets Supported Countries.
     * ISO 3166-1 alpha-2 or alpha-3 country code.
     *
     * @maps supportedCountries
     *
     * @param string[]|null $supportedCountries
     */
    public function setSupportedCountries(?array $supportedCountries): void
    {
        $this->supportedCountries = $supportedCountries;
    }

    /**
     * Returns Supported Currencies.
     * ISO 4217 currency code.
     *
     * @return string[]|null
     */
    public function getSupportedCurrencies(): ?array
    {
        return $this->supportedCurrencies;
    }

    /**
     * Sets Supported Currencies.
     * ISO 4217 currency code.
     *
     * @maps supportedCurrencies
     *
     * @param string[]|null $supportedCurrencies
     */
    public function setSupportedCurrencies(?array $supportedCurrencies): void
    {
        $this->supportedCurrencies = $supportedCurrencies;
    }

    /**
     * Returns Required Fields.
     *
     * @return string[]|null
     */
    public function getRequiredFields(): ?array
    {
        return $this->requiredFields;
    }

    /**
     * Sets Required Fields.
     *
     * @maps requiredFields
     *
     * @param string[]|null $requiredFields
     */
    public function setRequiredFields(?array $requiredFields): void
    {
        $this->requiredFields = $requiredFields;
    }

    /**
     * Returns Details.
     * Describes payment method specific details, accepted in the payment request.
     *
     * @return FieldSpecification[]|null
     */
    public function getDetails(): ?array
    {
        return $this->details;
    }

    /**
     * Sets Details.
     * Describes payment method specific details, accepted in the payment request.
     *
     * @maps details
     *
     * @param FieldSpecification[]|null $details
     */
    public function setDetails(?array $details): void
    {
        $this->details = $details;
    }

    /**
     * Returns Actions.
     * Describes action fields returned in the payment response.
     *
     * @return FieldSpecification[]|null
     */
    public function getActions(): ?array
    {
        return $this->actions;
    }

    /**
     * Sets Actions.
     * Describes action fields returned in the payment response.
     *
     * @maps actions
     *
     * @param FieldSpecification[]|null $actions
     */
    public function setActions(?array $actions): void
    {
        $this->actions = $actions;
    }

    /**
     * Returns Supported Instrument Types.
     * Describes the supported instrument type that can be used with this payment method.
     *
     * @return string[]|null
     */
    public function getSupportedInstrumentTypes(): ?array
    {
        return $this->supportedInstrumentTypes;
    }

    /**
     * Sets Supported Instrument Types.
     * Describes the supported instrument type that can be used with this payment method.
     *
     * @maps supportedInstrumentTypes
     *
     * @param string[]|null $supportedInstrumentTypes
     */
    public function setSupportedInstrumentTypes(?array $supportedInstrumentTypes): void
    {
        $this->supportedInstrumentTypes = $supportedInstrumentTypes;
    }

    /**
     * Returns Requires Instrument.
     * Indicates if this payment method requires one of the supported instrument types to be supplied.
     */
    public function getRequiresInstrument(): ?bool
    {
        return $this->requiresInstrument;
    }

    /**
     * Sets Requires Instrument.
     * Indicates if this payment method requires one of the supported instrument types to be supplied.
     *
     * @maps requiresInstrument
     */
    public function setRequiresInstrument(?bool $requiresInstrument): void
    {
        $this->requiresInstrument = $requiresInstrument;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->name)) {
            $json['name']                     = $this->name;
        }
        if (isset($this->displayName)) {
            $json['displayName']              = $this->displayName;
        }
        if (isset($this->supportedCountries)) {
            $json['supportedCountries']       = $this->supportedCountries;
        }
        if (isset($this->supportedCurrencies)) {
            $json['supportedCurrencies']      = $this->supportedCurrencies;
        }
        if (isset($this->requiredFields)) {
            $json['requiredFields']           = $this->requiredFields;
        }
        if (isset($this->details)) {
            $json['details']                  = $this->details;
        }
        if (isset($this->actions)) {
            $json['actions']                  = $this->actions;
        }
        if (isset($this->supportedInstrumentTypes)) {
            $json['supportedInstrumentTypes'] = $this->supportedInstrumentTypes;
        }
        if (isset($this->requiresInstrument)) {
            $json['requiresInstrument']       = $this->requiresInstrument;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
