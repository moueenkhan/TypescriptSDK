<?php

declare(strict_types=1);

/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace YapstoneStagedOnBoardingServicesLib\Models;

use stdClass;

/**
 * The name of the person. It will consist of first, middle, last, additionalLast, honorificPrefix, and
 * honorificSuffix.
 */
class IndividualName implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $honorificPrefix;

    /**
     * @var string
     */
    private $first;

    /**
     * @var string|null
     */
    private $middle;

    /**
     * @var string
     */
    private $last;

    /**
     * @var string|null
     */
    private $additionalLast;

    /**
     * @var string|null
     */
    private $honorificSuffix;

    /**
     * @param string $first
     * @param string $last
     */
    public function __construct(string $first, string $last)
    {
        $this->first = $first;
        $this->last = $last;
    }

    /**
     * Returns Honorific Prefix.
     * The persons title.
     */
    public function getHonorificPrefix(): ?string
    {
        return $this->honorificPrefix;
    }

    /**
     * Sets Honorific Prefix.
     * The persons title.
     *
     * @maps honorificPrefix
     */
    public function setHonorificPrefix(?string $honorificPrefix): void
    {
        $this->honorificPrefix = $honorificPrefix;
    }

    /**
     * Returns First.
     * The persons first name.
     */
    public function getFirst(): string
    {
        return $this->first;
    }

    /**
     * Sets First.
     * The persons first name.
     *
     * @required
     * @maps first
     */
    public function setFirst(string $first): void
    {
        $this->first = $first;
    }

    /**
     * Returns Middle.
     * The persons middle name or initial.
     */
    public function getMiddle(): ?string
    {
        return $this->middle;
    }

    /**
     * Sets Middle.
     * The persons middle name or initial.
     *
     * @maps middle
     */
    public function setMiddle(?string $middle): void
    {
        $this->middle = $middle;
    }

    /**
     * Returns Last.
     * The persons last name.
     */
    public function getLast(): string
    {
        return $this->last;
    }

    /**
     * Sets Last.
     * The persons last name.
     *
     * @required
     * @maps last
     */
    public function setLast(string $last): void
    {
        $this->last = $last;
    }

    /**
     * Returns Additional Last.
     * The 2nd last name of the person.
     */
    public function getAdditionalLast(): ?string
    {
        return $this->additionalLast;
    }

    /**
     * Sets Additional Last.
     * The 2nd last name of the person.
     *
     * @maps additionalLast
     */
    public function setAdditionalLast(?string $additionalLast): void
    {
        $this->additionalLast = $additionalLast;
    }

    /**
     * Returns Honorific Suffix.
     * The persons title.
     */
    public function getHonorificSuffix(): ?string
    {
        return $this->honorificSuffix;
    }

    /**
     * Sets Honorific Suffix.
     * The persons title.
     *
     * @maps honorificSuffix
     */
    public function setHonorificSuffix(?string $honorificSuffix): void
    {
        $this->honorificSuffix = $honorificSuffix;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->honorificPrefix)) {
            $json['honorificPrefix'] = $this->honorificPrefix;
        }
        $json['first']               = $this->first;
        if (isset($this->middle)) {
            $json['middle']          = $this->middle;
        }
        $json['last']                = $this->last;
        if (isset($this->additionalLast)) {
            $json['additionalLast']  = $this->additionalLast;
        }
        if (isset($this->honorificSuffix)) {
            $json['honorificSuffix'] = $this->honorificSuffix;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
