<?php

declare(strict_types=1);

/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace YapstoneStagedOnBoardingServicesLib\Models;

use stdClass;

class CustomerSpecification implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $type;

    /**
     * @var string|null
     */
    private $country;

    /**
     * @var string|null
     */
    private $commerceType;

    /**
     * @var string[]|null
     */
    private $requiredFields;

    /**
     * @var FieldSpecification[]|null
     */
    private $additional;

    /**
     * @var RequiredIdentityDocuments[]|null
     */
    private $identityDocuments;

    /**
     * Returns Type.
     * the second description of type parameter
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * the second description of type parameter
     *
     * @maps type
     * @factory \YapstoneStagedOnBoardingServicesLib\Models\LegalEntityTypeEnum::checkValue
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Country.
     * ISO 3166-1 alpha-2 or alpha-3 country code.
     */
    public function getCountry(): ?string
    {
        return $this->country;
    }

    /**
     * Sets Country.
     * ISO 3166-1 alpha-2 or alpha-3 country code.
     *
     * @maps country
     */
    public function setCountry(?string $country): void
    {
        $this->country = $country;
    }

    /**
     * Returns Commerce Type.
     */
    public function getCommerceType(): ?string
    {
        return $this->commerceType;
    }

    /**
     * Sets Commerce Type.
     *
     * @maps commerceType
     */
    public function setCommerceType(?string $commerceType): void
    {
        $this->commerceType = $commerceType;
    }

    /**
     * Returns Required Fields.
     *
     * @return string[]|null
     */
    public function getRequiredFields(): ?array
    {
        return $this->requiredFields;
    }

    /**
     * Sets Required Fields.
     *
     * @maps requiredFields
     *
     * @param string[]|null $requiredFields
     */
    public function setRequiredFields(?array $requiredFields): void
    {
        $this->requiredFields = $requiredFields;
    }

    /**
     * Returns Additional.
     *
     * @return FieldSpecification[]|null
     */
    public function getAdditional(): ?array
    {
        return $this->additional;
    }

    /**
     * Sets Additional.
     *
     * @maps additional
     *
     * @param FieldSpecification[]|null $additional
     */
    public function setAdditional(?array $additional): void
    {
        $this->additional = $additional;
    }

    /**
     * Returns Identity Documents.
     * A list of required identity documents, each entity in the list should be considered as an OR
     * condition. Only a single entry need be satisfied.
     *
     * @return RequiredIdentityDocuments[]|null
     */
    public function getIdentityDocuments(): ?array
    {
        return $this->identityDocuments;
    }

    /**
     * Sets Identity Documents.
     * A list of required identity documents, each entity in the list should be considered as an OR
     * condition. Only a single entry need be satisfied.
     *
     * @maps identityDocuments
     *
     * @param RequiredIdentityDocuments[]|null $identityDocuments
     */
    public function setIdentityDocuments(?array $identityDocuments): void
    {
        $this->identityDocuments = $identityDocuments;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->type)) {
            $json['type']              = LegalEntityTypeEnum::checkValue($this->type);
        }
        if (isset($this->country)) {
            $json['country']           = $this->country;
        }
        if (isset($this->commerceType)) {
            $json['commerceType']      = $this->commerceType;
        }
        if (isset($this->requiredFields)) {
            $json['requiredFields']    = $this->requiredFields;
        }
        if (isset($this->additional)) {
            $json['additional']        = $this->additional;
        }
        if (isset($this->identityDocuments)) {
            $json['identityDocuments'] = $this->identityDocuments;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
