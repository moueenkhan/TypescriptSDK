<?php

declare(strict_types=1);

/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace YapstoneStagedOnBoardingServicesLib\Models;

use stdClass;

/**
 * **Important !** Depending on the value of the `type` parameter, the `LegalEntity` model is extended
 * with either [`IndividualLegalEntity`]($m/IndividualLegalEntity) or
 * [`BusinessLegalEntity`]($m/BusinessLegalEntity)
 */
class LegalEntity implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string
     */
    private $type;

    /**
     * @var Address|null
     */
    private $address;

    /**
     * @var Phone|null
     */
    private $phone;

    /**
     * @var string|null
     */
    private $email;

    /**
     * @var string|null
     */
    private $website;

    /**
     * @var SocialNetwork[]|null
     */
    private $socialNetworks;

    /**
     * @var string[]|null
     */
    private $digitalCurrencyAddresses;

    /**
     * @var array<string,string>|null
     */
    private $additional;

    /**
     * @param string $type
     */
    public function __construct(string $type)
    {
        $this->type = $type;
    }

    /**
     * Returns Id.
     * The Party ID of the Customer, for internal use only. Should not appear in user facing documentation.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * The Party ID of the Customer, for internal use only. Should not appear in user facing documentation.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Type.
     * the second description of type parameter
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * the second description of type parameter
     *
     * @required
     * @maps type
     * @factory \YapstoneStagedOnBoardingServicesLib\Models\LegalEntityTypeEnum::checkValue
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Address.
     */
    public function getAddress(): ?Address
    {
        return $this->address;
    }

    /**
     * Sets Address.
     *
     * @maps address
     */
    public function setAddress(?Address $address): void
    {
        $this->address = $address;
    }

    /**
     * Returns Phone.
     */
    public function getPhone(): ?Phone
    {
        return $this->phone;
    }

    /**
     * Sets Phone.
     *
     * @maps phone
     */
    public function setPhone(?Phone $phone): void
    {
        $this->phone = $phone;
    }

    /**
     * Returns Email.
     * The email address.
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * Sets Email.
     * The email address.
     *
     * @maps email
     */
    public function setEmail(?string $email): void
    {
        $this->email = $email;
    }

    /**
     * Returns Website.
     * The website hostname.
     */
    public function getWebsite(): ?string
    {
        return $this->website;
    }

    /**
     * Sets Website.
     * The website hostname.
     *
     * @maps website
     */
    public function setWebsite(?string $website): void
    {
        $this->website = $website;
    }

    /**
     * Returns Social Networks.
     *
     * @return SocialNetwork[]|null
     */
    public function getSocialNetworks(): ?array
    {
        return $this->socialNetworks;
    }

    /**
     * Sets Social Networks.
     *
     * @maps socialNetworks
     *
     * @param SocialNetwork[]|null $socialNetworks
     */
    public function setSocialNetworks(?array $socialNetworks): void
    {
        $this->socialNetworks = $socialNetworks;
    }

    /**
     * Returns Digital Currency Addresses.
     *
     * @return string[]|null
     */
    public function getDigitalCurrencyAddresses(): ?array
    {
        return $this->digitalCurrencyAddresses;
    }

    /**
     * Sets Digital Currency Addresses.
     *
     * @maps digitalCurrencyAddresses
     *
     * @param string[]|null $digitalCurrencyAddresses
     */
    public function setDigitalCurrencyAddresses(?array $digitalCurrencyAddresses): void
    {
        $this->digitalCurrencyAddresses = $digitalCurrencyAddresses;
    }

    /**
     * Returns Additional.
     *
     * @return array<string,string>|null
     */
    public function getAdditional(): ?array
    {
        return $this->additional;
    }

    /**
     * Sets Additional.
     *
     * @maps additional
     *
     * @param array<string,string>|null $additional
     */
    public function setAdditional(?array $additional): void
    {
        $this->additional = $additional;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']                       = $this->id;
        }
        $json['type']                         = LegalEntityTypeEnum::checkValue($this->type);
        if (isset($this->address)) {
            $json['address']                  = $this->address;
        }
        if (isset($this->phone)) {
            $json['phone']                    = $this->phone;
        }
        if (isset($this->email)) {
            $json['email']                    = $this->email;
        }
        if (isset($this->website)) {
            $json['website']                  = $this->website;
        }
        if (isset($this->socialNetworks)) {
            $json['socialNetworks']           = $this->socialNetworks;
        }
        if (isset($this->digitalCurrencyAddresses)) {
            $json['digitalCurrencyAddresses'] = $this->digitalCurrencyAddresses;
        }
        if (isset($this->additional)) {
            $json['additional']               = $this->additional;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
