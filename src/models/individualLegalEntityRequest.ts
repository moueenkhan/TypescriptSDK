/**
 * Yapstone Staged On-Boarding ServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { array, dict, lazy, object, optional, Schema, string } from '../schema';
import { Address, addressSchema } from './address';
import { GenderEnum, genderEnumSchema } from './genderEnum';
import { IdentityDocument, identityDocumentSchema } from './identityDocument';
import { IndividualName, individualNameSchema } from './individualName';
import {
  LegalEntityTypeEnum,
  legalEntityTypeEnumSchema,
} from './legalEntityTypeEnum';
import { Phone, phoneSchema } from './phone';
import { SocialNetwork, socialNetworkSchema } from './socialNetwork';

export interface IndividualLegalEntityRequest {
  /** the second description of type parameter */
  type: LegalEntityTypeEnum;
  address?: Address;
  phone?: Phone;
  /** The email address. */
  email?: string;
  website?: string;
  socialNetworks?: SocialNetwork[];
  digitalCurrencyAddresses?: string[];
  additional?: Record<string, string>;
  /** The name of the person. It will consist of first, middle, last, additionalLast, honorificPrefix, and honorificSuffix. */
  name: IndividualName;
  gender?: GenderEnum;
  /** The date of birth for the person, format should be (yyyy-mm-dd) */
  dateOfBirth?: string;
  /** ISO 3166-1 alpha-2 or alpha-3 country code. */
  countryOfBirth?: string;
  /** ISO 3166-1 alpha-2 or alpha-3 country code. */
  nationality?: string;
  identificationDocuments?: IdentityDocument[];
}

export const individualLegalEntityRequestSchema: Schema<IndividualLegalEntityRequest> = object(
  {
    type: ['type', legalEntityTypeEnumSchema],
    address: ['address', optional(lazy(() => addressSchema))],
    phone: ['phone', optional(lazy(() => phoneSchema))],
    email: ['email', optional(string())],
    website: ['website', optional(string())],
    socialNetworks: [
      'socialNetworks',
      optional(array(lazy(() => socialNetworkSchema))),
    ],
    digitalCurrencyAddresses: [
      'digitalCurrencyAddresses',
      optional(array(string())),
    ],
    additional: ['additional', optional(dict(string()))],
    name: ['name', lazy(() => individualNameSchema)],
    gender: ['gender', optional(genderEnumSchema)],
    dateOfBirth: ['dateOfBirth', optional(string())],
    countryOfBirth: ['countryOfBirth', optional(string())],
    nationality: ['nationality', optional(string())],
    identificationDocuments: [
      'identificationDocuments',
      optional(array(lazy(() => identityDocumentSchema))),
    ],
  }
);
