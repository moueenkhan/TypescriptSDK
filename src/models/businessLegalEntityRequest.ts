/**
 * Yapstone Staged On-Boarding ServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { array, dict, lazy, object, optional, Schema, string } from '../schema';
import { Address, addressSchema } from './address';
import {
  BusinessRegistration,
  businessRegistrationSchema,
} from './businessRegistration';
import { BusinessTypeEnum, businessTypeEnumSchema } from './businessTypeEnum';
import { IdentityDocument, identityDocumentSchema } from './identityDocument';
import {
  IndividualLegalEntityRequest,
  individualLegalEntityRequestSchema,
} from './individualLegalEntityRequest';
import {
  LegalEntityRequest,
  legalEntityRequestSchema,
} from './legalEntityRequest';
import {
  LegalEntityTypeEnum,
  legalEntityTypeEnumSchema,
} from './legalEntityTypeEnum';
import { Phone, phoneSchema } from './phone';
import { SocialNetwork, socialNetworkSchema } from './socialNetwork';

export interface BusinessLegalEntityRequest {
  /** the second description of type parameter */
  type: LegalEntityTypeEnum;
  address?: Address;
  phone?: Phone;
  /** The email address. */
  email?: string;
  website?: string;
  socialNetworks?: SocialNetwork[];
  digitalCurrencyAddresses?: string[];
  additional?: Record<string, string>;
  name?: string;
  businessType?: BusinessTypeEnum;
  /** Doing Business As */
  dba?: string[];
  primaryContact?: IndividualLegalEntityRequest;
  /** **Important !** Depending on the value of the `type` parameter, the `LegalEntityRequest` model is extended with either [`IndividualLegalEntityRequest`]($m/IndividualLegalEntityRequest) or [`BusinessLegalEntityRequest`]($m/BusinessLegalEntityRequest) */
  principalOwner?: LegalEntityRequest;
  /** An array of any owners with at least 25% ownership of the company, excluding the principal owner responsible for the account. */
  additionalOwners?: LegalEntityRequest[];
  identityDocuments?: IdentityDocument[];
  registration?: BusinessRegistration;
}

export const businessLegalEntityRequestSchema: Schema<BusinessLegalEntityRequest> = object(
  {
    type: ['type', legalEntityTypeEnumSchema],
    address: ['address', optional(lazy(() => addressSchema))],
    phone: ['phone', optional(lazy(() => phoneSchema))],
    email: ['email', optional(string())],
    website: ['website', optional(string())],
    socialNetworks: [
      'socialNetworks',
      optional(array(lazy(() => socialNetworkSchema))),
    ],
    digitalCurrencyAddresses: [
      'digitalCurrencyAddresses',
      optional(array(string())),
    ],
    additional: ['additional', optional(dict(string()))],
    name: ['name', optional(string())],
    businessType: ['businessType', optional(businessTypeEnumSchema)],
    dba: ['dba', optional(array(string()))],
    primaryContact: [
      'primaryContact',
      optional(lazy(() => individualLegalEntityRequestSchema)),
    ],
    principalOwner: [
      'principalOwner',
      optional(lazy(() => legalEntityRequestSchema)),
    ],
    additionalOwners: [
      'additionalOwners',
      optional(array(lazy(() => legalEntityRequestSchema))),
    ],
    identityDocuments: [
      'identityDocuments',
      optional(array(lazy(() => identityDocumentSchema))),
    ],
    registration: [
      'registration',
      optional(lazy(() => businessRegistrationSchema)),
    ],
  }
);
