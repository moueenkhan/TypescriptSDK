/**
 * Yapstone Staged On-Boarding ServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { array, dict, lazy, object, optional, Schema, string } from '../schema';
import { Address, addressSchema } from './address';
import {
  LegalEntityTypeEnum,
  legalEntityTypeEnumSchema,
} from './legalEntityTypeEnum';
import { Phone, phoneSchema } from './phone';
import { SocialNetwork, socialNetworkSchema } from './socialNetwork';

/** **Important !** Depending on the value of the `type` parameter, the `LegalEntityRequest` model is extended with either [`IndividualLegalEntityRequest`]($m/IndividualLegalEntityRequest) or [`BusinessLegalEntityRequest`]($m/BusinessLegalEntityRequest) */
export interface LegalEntityRequest {
  /** the second description of type parameter */
  type: LegalEntityTypeEnum;
  address?: Address;
  phone?: Phone;
  /** The email address. */
  email?: string;
  website?: string;
  socialNetworks?: SocialNetwork[];
  digitalCurrencyAddresses?: string[];
  additional?: Record<string, string>;
}

export const legalEntityRequestSchema: Schema<LegalEntityRequest> = object({
  type: ['type', legalEntityTypeEnumSchema],
  address: ['address', optional(lazy(() => addressSchema))],
  phone: ['phone', optional(lazy(() => phoneSchema))],
  email: ['email', optional(string())],
  website: ['website', optional(string())],
  socialNetworks: [
    'socialNetworks',
    optional(array(lazy(() => socialNetworkSchema))),
  ],
  digitalCurrencyAddresses: [
    'digitalCurrencyAddresses',
    optional(array(string())),
  ],
  additional: ['additional', optional(dict(string()))],
});
