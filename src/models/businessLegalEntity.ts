/**
 * Yapstone Staged On-Boarding ServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { array, dict, lazy, object, optional, Schema, string } from '../schema';
import { Address, addressSchema } from './address';
import {
  BusinessRegistration,
  businessRegistrationSchema,
} from './businessRegistration';
import { BusinessTypeEnum, businessTypeEnumSchema } from './businessTypeEnum';
import { IdentityDocument, identityDocumentSchema } from './identityDocument';
import {
  IndividualLegalEntity,
  individualLegalEntitySchema,
} from './individualLegalEntity';
import { LegalEntity, legalEntitySchema } from './legalEntity';
import {
  LegalEntityTypeEnum,
  legalEntityTypeEnumSchema,
} from './legalEntityTypeEnum';
import { Phone, phoneSchema } from './phone';
import { SocialNetwork, socialNetworkSchema } from './socialNetwork';

export interface BusinessLegalEntity {
  /** The Party ID of the Customer, for internal use only. Should not appear in user facing documentation. */
  id?: string;
  /** the second description of type parameter */
  type: LegalEntityTypeEnum;
  address?: Address;
  phone?: Phone;
  /** The email address. */
  email?: string;
  /** The website hostname. */
  website?: string;
  socialNetworks?: SocialNetwork[];
  digitalCurrencyAddresses?: string[];
  additional?: Record<string, string>;
  /** The business's legal name. */
  name?: string;
  businessType?: BusinessTypeEnum;
  /** Doing Busines As */
  dba?: string[];
  primaryContact?: IndividualLegalEntity;
  /** **Important !** Depending on the value of the `type` parameter, the `LegalEntity` model is extended with either [`IndividualLegalEntity`]($m/IndividualLegalEntity) or [`BusinessLegalEntity`]($m/BusinessLegalEntity) */
  principalOwner?: LegalEntity;
  /** An array of any owners with at least 25% ownership of the company, excluding the principal owner responsible for the account. */
  additionalOwners?: LegalEntity[];
  identityDocuments?: IdentityDocument[];
  registration?: BusinessRegistration;
}

export const businessLegalEntitySchema: Schema<BusinessLegalEntity> = object({
  id: ['id', optional(string())],
  type: ['type', legalEntityTypeEnumSchema],
  address: ['address', optional(lazy(() => addressSchema))],
  phone: ['phone', optional(lazy(() => phoneSchema))],
  email: ['email', optional(string())],
  website: ['website', optional(string())],
  socialNetworks: [
    'socialNetworks',
    optional(array(lazy(() => socialNetworkSchema))),
  ],
  digitalCurrencyAddresses: [
    'digitalCurrencyAddresses',
    optional(array(string())),
  ],
  additional: ['additional', optional(dict(string()))],
  name: ['name', optional(string())],
  businessType: ['businessType', optional(businessTypeEnumSchema)],
  dba: ['dba', optional(array(string()))],
  primaryContact: [
    'primaryContact',
    optional(lazy(() => individualLegalEntitySchema)),
  ],
  principalOwner: ['principalOwner', optional(lazy(() => legalEntitySchema))],
  additionalOwners: [
    'additionalOwners',
    optional(array(lazy(() => legalEntitySchema))),
  ],
  identityDocuments: [
    'identityDocuments',
    optional(array(lazy(() => identityDocumentSchema))),
  ],
  registration: [
    'registration',
    optional(lazy(() => businessRegistrationSchema)),
  ],
});
