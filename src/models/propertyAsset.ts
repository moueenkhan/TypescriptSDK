/**
 * Yapstone Staged On-Boarding ServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  dict,
  lazy,
  literal,
  object,
  optional,
  Schema,
  string,
  unknown,
} from '../schema';
import { Address, addressSchema } from './address';
import { Asset } from './asset';
import { capabilitiesSchema } from './capabilities';
import { correlationRefSchema } from './correlationRef';
import { EntityStatus, entityStatusSchema } from './entityStatus';
import { parentSchema } from './parent';
import {
  PropertyBookingHistory,
  propertyBookingHistorySchema,
} from './propertyBookingHistory';
import { PropertyDetails, propertyDetailsSchema } from './propertyDetails';
import {
  PropertyRateDetails,
  propertyRateDetailsSchema,
} from './propertyRateDetails';
import { PropertyRating, propertyRatingSchema } from './propertyRating';
import {
  PropertyReservationPolicy,
  propertyReservationPolicySchema,
} from './propertyReservationPolicy';

export interface PropertyAsset extends Asset {
  name?: string;
  address?: Address;
  details?: PropertyDetails;
  rating?: PropertyRating;
  reservationPolicy?: PropertyReservationPolicy;
  rateDetails?: PropertyRateDetails;
  bookingHistory?: PropertyBookingHistory;
  status?: EntityStatus;
}

export const propertyAssetSchema: Schema<any> = object({
  name: ['name', optional(string())],
  address: ['address', optional(lazy(() => addressSchema))],
  details: ['details', optional(lazy(() => propertyDetailsSchema))],
  rating: ['rating', optional(lazy(() => propertyRatingSchema))],
  reservationPolicy: [
    'reservationPolicy',
    optional(lazy(() => propertyReservationPolicySchema)),
  ],
  rateDetails: ['rateDetails', optional(lazy(() => propertyRateDetailsSchema))],
  bookingHistory: [
    'bookingHistory',
    optional(lazy(() => propertyBookingHistorySchema)),
  ],
  status: ['status', optional(lazy(() => entityStatusSchema))],
  id: ['id', optional(string())],
  created: ['created', optional(string())],
  updated: ['updated', optional(string())],
  correlationRefs: [
    'correlationRefs',
    optional(array(lazy(() => correlationRefSchema))),
  ],
  metadata: ['metadata', optional(dict(string()))],
  parent: ['parent', optional(lazy(() => parentSchema))],
  displayName: ['displayName', optional(string())],
  capabilities: ['capabilities', optional(lazy(() => capabilitiesSchema))],
  preferences: ['preferences', optional(unknown())],
  type: ['type', optional(literal('PropertyAsset'))],
});
