/**
 * Yapstone Staged On-Boarding ServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { array, dict, lazy, object, optional, Schema, string } from '../schema';
import { Address, addressSchema } from './address';
import { Capabilities, capabilitiesSchema } from './capabilities';
import { CorrelationRef, correlationRefSchema } from './correlationRef';
import { Fingerprint, fingerprintSchema } from './fingerprint';
import { InstrumentStatus, instrumentStatusSchema } from './instrumentStatus';
import { NameOnAccount, nameOnAccountSchema } from './nameOnAccount';
import { Parent, parentSchema } from './parent';

export interface Instrument {
  id?: string;
  created?: string;
  updated?: string;
  correlationRefs?: CorrelationRef[];
  metadata?: Record<string, string>;
  parent?: Parent;
  type?: string;
  currency?: string;
  /** ISO 3166-1 alpha-2 or alpha-3 country code. */
  country?: string;
  displayName?: string;
  namesOnAccount?: NameOnAccount[];
  address?: Address;
  details?: Record<string, string>;
  fingerprints?: Fingerprint[];
  status?: InstrumentStatus;
  capabilities?: Capabilities;
}

export const instrumentSchema: Schema<Instrument> = object({
  id: ['id', optional(string())],
  created: ['created', optional(string())],
  updated: ['updated', optional(string())],
  correlationRefs: [
    'correlationRefs',
    optional(array(lazy(() => correlationRefSchema))),
  ],
  metadata: ['metadata', optional(dict(string()))],
  parent: ['parent', optional(lazy(() => parentSchema))],
  type: ['type', optional(string())],
  currency: ['currency', optional(string())],
  country: ['country', optional(string())],
  displayName: ['displayName', optional(string())],
  namesOnAccount: [
    'namesOnAccount',
    optional(array(lazy(() => nameOnAccountSchema))),
  ],
  address: ['address', optional(lazy(() => addressSchema))],
  details: ['details', optional(dict(string()))],
  fingerprints: [
    'fingerprints',
    optional(array(lazy(() => fingerprintSchema))),
  ],
  status: ['status', optional(lazy(() => instrumentStatusSchema))],
  capabilities: ['capabilities', optional(lazy(() => capabilitiesSchema))],
});
