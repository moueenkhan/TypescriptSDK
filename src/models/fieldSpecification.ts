/**
 * Yapstone Staged On-Boarding ServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  bigint,
  boolean,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { FieldTypeEnum, fieldTypeEnumSchema } from './fieldTypeEnum';

export interface FieldSpecification {
  /** The field name within the `details` section of an `Instrument` or `IdentityDocument`. */
  field?: string;
  /** The type of the field. */
  type?: FieldTypeEnum;
  /** Detailed description of the field. */
  description?: string;
  /** Human friendly name for the field, for display purposes in UIs. */
  displayName?: string;
  /** Indicates if the specified field is required or optional. */
  required?: boolean;
  /** If present then the value may not be less than the specified minimum length. Only applicable for the 'STRING' type. */
  minimumLength?: bigint;
  /** If present then the value may not exceed the specified maximum length. Only applicable for the 'STRING' type. */
  maximumLength?: bigint;
  /** If true, then the field will not be available to the caller in the clear, instead as masked version will be returned. */
  masked?: boolean;
  /** If true, then the detail cannot be populated by the caller, but instead will be generated internally. */
  readOnly?: boolean;
  /** If the specification type is 'ENUMERATION' then the input will be validated against these accepted values. */
  enumValues?: string[];
}

export const fieldSpecificationSchema: Schema<FieldSpecification> = object({
  field: ['field', optional(string())],
  type: ['type', optional(fieldTypeEnumSchema)],
  description: ['description', optional(string())],
  displayName: ['displayName', optional(string())],
  required: ['required', optional(boolean())],
  minimumLength: ['minimumLength', optional(bigint())],
  maximumLength: ['maximumLength', optional(bigint())],
  masked: ['masked', optional(boolean())],
  readOnly: ['readOnly', optional(boolean())],
  enumValues: ['enumValues', optional(array(string()))],
});
