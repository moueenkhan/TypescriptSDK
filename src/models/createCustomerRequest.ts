/**
 * Yapstone Staged On-Boarding ServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { array, dict, lazy, object, optional, Schema, string } from '../schema';
import { CorrelationRef, correlationRefSchema } from './correlationRef';
import { CustomerOptions, customerOptionsSchema } from './customerOptions';
import {
  LegalEntityRequest,
  legalEntityRequestSchema,
} from './legalEntityRequest';
import { Parent, parentSchema } from './parent';

export interface CreateCustomerRequest {
  correlationRefs?: CorrelationRef[];
  metadata?: Record<string, string>;
  parent?: Parent;
  /** If not supplied, derived from the legal entity name. */
  displayName?: string;
  /** ISO 3166-1 alpha-2 or alpha-3 country code. */
  country: string;
  /** Time Zone ID. If not supplied will be derived from the `country` usually the capital city. */
  timezone?: string;
  /** Default currency for this customer, if not supplied derived from the `country`. */
  defaultCurrency?: string;
  /** Default language for this customer, if not supplied derived from the `country`. */
  defaultLanguage?: string;
  /** **Important !** Depending on the value of the `type` parameter, the `LegalEntityRequest` model is extended with either [`IndividualLegalEntityRequest`]($m/IndividualLegalEntityRequest) or [`BusinessLegalEntityRequest`]($m/BusinessLegalEntityRequest) */
  legalEntity: LegalEntityRequest;
  options?: CustomerOptions;
}

export const createCustomerRequestSchema: Schema<CreateCustomerRequest> = object(
  {
    correlationRefs: [
      'correlationRefs',
      optional(array(lazy(() => correlationRefSchema))),
    ],
    metadata: ['metadata', optional(dict(string()))],
    parent: ['parent', optional(lazy(() => parentSchema))],
    displayName: ['displayName', optional(string())],
    country: ['country', string()],
    timezone: ['timezone', optional(string())],
    defaultCurrency: ['defaultCurrency', optional(string())],
    defaultLanguage: ['defaultLanguage', optional(string())],
    legalEntity: ['legalEntity', lazy(() => legalEntityRequestSchema)],
    options: ['options', optional(lazy(() => customerOptionsSchema))],
  }
);
