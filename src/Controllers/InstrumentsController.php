<?php

declare(strict_types=1);

/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace YapstoneStagedOnBoardingServicesLib\Controllers;

use YapstoneStagedOnBoardingServicesLib\Exceptions\ApiException;
use YapstoneStagedOnBoardingServicesLib\ConfigurationInterface;
use YapstoneStagedOnBoardingServicesLib\ApiHelper;
use YapstoneStagedOnBoardingServicesLib\Models;
use YapstoneStagedOnBoardingServicesLib\Http\HttpRequest;
use YapstoneStagedOnBoardingServicesLib\Http\HttpResponse;
use YapstoneStagedOnBoardingServicesLib\Http\HttpMethod;
use YapstoneStagedOnBoardingServicesLib\Http\HttpContext;
use YapstoneStagedOnBoardingServicesLib\Http\HttpCallBack;

class InstrumentsController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * Retrieve all Instruments.
     *
     * @param int|null $offset Offset the list of returned results by this amount. Default is `0`.
     * @param int|null $limit Number of items to retrieve.
     * @param string|null $marketplaceId Filter by `marketplaceId`.
     * @param string|null $merchantId Filter by `merchantId`.
     * @param string|null $customerId Filter by `customerId`.
     * @param string|null $correlationRefLabel Filter by `correlationRef.label`.
     * @param string|null $correlationRefValue Filter by `correlationRef.value`.
     * @param bool|null $internalUseOnly Indicates that internal-use-only fields should be returned.
     *
     * @return Models\InstrumentPage Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getInstruments(
        ?int $offset = 0,
        ?int $limit = 20,
        ?string $marketplaceId = null,
        ?string $merchantId = null,
        ?string $customerId = null,
        ?string $correlationRefLabel = null,
        ?string $correlationRefValue = null,
        ?bool $internalUseOnly = false
    ): Models\InstrumentPage {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/instruments';

        //process query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryUrl, [
            'offset'              => (null != $offset) ?
                $offset : 0,
            'limit'               => (null != $limit) ?
                $limit : 20,
            'marketplaceId'       => $marketplaceId,
            'merchantId'          => $merchantId,
            'customerId'          => $customerId,
            'correlationRefLabel' => $correlationRefLabel,
            'correlationRefValue' => $correlationRefValue,
            'internalUseOnly'     => (null != $internalUseOnly) ?
                var_export($internalUseOnly, true) : false,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'        => self::$userAgent,
            'Accept'            => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = self::$request->get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw $this->createExceptionFromJson(
                '\\YapstoneStagedOnBoardingServicesLib\\Exceptions\\ErrorsException',
                'Bad Request',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'InstrumentPage');
    }

    /**
     * Create an Instrument.
     *
     * @param Models\CreateInstrumentRequest $request
     * @param string|null $xYapStoneIdempotentKey
     * @param bool|null $internalUseOnly Indicates that internal-use-only fields should be returned.
     *
     * @return Models\Instrument Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createInstrument(
        Models\CreateInstrumentRequest $request,
        ?string $xYapStoneIdempotentKey = null,
        ?bool $internalUseOnly = false
    ): Models\Instrument {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/instruments';

        //process query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryUrl, [
            'internalUseOnly'          => (null != $internalUseOnly) ?
                var_export($internalUseOnly, true) : false,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'             => self::$userAgent,
            'Accept'                 => 'application/json',
            'content-type'           => 'application/json',
            'X-YapStone-IdempotentKey' => $xYapStoneIdempotentKey
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($request);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = self::$request->post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 409) {
            throw $this->createExceptionFromJson(
                '\\YapstoneStagedOnBoardingServicesLib\\Exceptions\\ErrorsException',
                'Conflict',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 422) {
            throw $this->createExceptionFromJson(
                '\\YapstoneStagedOnBoardingServicesLib\\Exceptions\\ErrorsException',
                'Unprocessable Entity',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'Instrument');
    }

    /**
     * Retrieve an Instrument by id.
     *
     * @param string $id
     * @param bool|null $internalUseOnly Indicates that internal-use-only fields should be returned.
     *
     * @return Models\Instrument Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getInstrument(string $id, ?bool $internalUseOnly = false): Models\Instrument
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/instruments/{id}';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'id'              => $id,
        ]);

        //process query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryUrl, [
            'internalUseOnly' => (null != $internalUseOnly) ?
                var_export($internalUseOnly, true) : false,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = self::$request->get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw $this->createExceptionFromJson(
                '\\YapstoneStagedOnBoardingServicesLib\\Exceptions\\ErrorsException',
                'Not Found',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'Instrument');
    }

    /**
     * Update an Instrument by id.
     *
     * @param string $id
     * @param Models\UpdateInstrumentRequest $request
     * @param string|null $xYapStoneIdempotentKey
     * @param bool|null $internalUseOnly Indicates that internal-use-only fields should be returned.
     *
     * @return Models\Instrument Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateInstrument(
        string $id,
        Models\UpdateInstrumentRequest $request,
        ?string $xYapStoneIdempotentKey = null,
        ?bool $internalUseOnly = false
    ): Models\Instrument {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/instruments/{id}';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'id'                       => $id,
        ]);

        //process query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryUrl, [
            'internalUseOnly'          => (null != $internalUseOnly) ?
                var_export($internalUseOnly, true) : false,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'             => self::$userAgent,
            'Accept'                 => 'application/json',
            'content-type'           => 'application/json',
            'X-YapStone-IdempotentKey' => $xYapStoneIdempotentKey
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($request);

        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = self::$request->put($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw $this->createExceptionFromJson(
                '\\YapstoneStagedOnBoardingServicesLib\\Exceptions\\ErrorsException',
                'Not Found',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 409) {
            throw $this->createExceptionFromJson(
                '\\YapstoneStagedOnBoardingServicesLib\\Exceptions\\ErrorsException',
                'Conflict',
                $_httpRequest,
                $_httpResponse
            );
        }

        if ($response->code == 422) {
            throw $this->createExceptionFromJson(
                '\\YapstoneStagedOnBoardingServicesLib\\Exceptions\\ErrorsException',
                'Unprocessable Entity',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'Instrument');
    }

    /**
     * Delete an Instrument by id.
     *
     * @param string $id
     *
     * @return Models\Instrument Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteInstrument(string $id): Models\Instrument
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/instruments/{id}';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'id' => $id,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = self::$request->delete($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw $this->createExceptionFromJson(
                '\\YapstoneStagedOnBoardingServicesLib\\Exceptions\\ErrorsException',
                'Not Found',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'Instrument');
    }

    /**
     * Request verification of an Instrument by id.
     *
     * @param string $id
     * @param Models\VerifyInstrumentRequest $request
     *
     * @return Models\Instrument Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function verifyInstrument(string $id, Models\VerifyInstrumentRequest $request): Models\Instrument
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri() . '/instruments/{id}/verification';

        //process template parameters
        $_queryUrl = ApiHelper::appendUrlWithTemplateParameters($_queryUrl, [
            'id'      => $id,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json'
        ];

        //json encode body
        $_bodyJson = ApiHelper::serialize($request);

        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = self::$request->post($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders(), $_bodyJson);
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw $this->createExceptionFromJson(
                '\\YapstoneStagedOnBoardingServicesLib\\Exceptions\\ErrorsException',
                'Not Found',
                $_httpRequest,
                $_httpResponse
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'Instrument');
    }
}
